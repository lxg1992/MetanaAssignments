{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Box.sol": {
      "content": "// contracts/Box.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Box is Ownable {\n    uint8[] private numbers8bit;\n    uint256 private value;\n    bytes32 private currentHash;\n\n    function keccakBytesHash(bytes memory _bytes32Val) public onlyOwner {\n        currentHash = keccak256(_bytes32Val);\n    }\n\n    struct Person {\n        string name;\n        uint8 age;\n        uint8 heightInCm;\n        bool senior;\n        string[] hobbies;\n    }\n\n    mapping(address => Person) private people;\n\n    function setNumbers8bit(uint8[] memory _numbers8bit) public onlyOwner {\n        numbers8bit = _numbers8bit;\n    }\n\n    function alterNumber8bit(uint256 _index, uint8 _value) public onlyOwner {\n        numbers8bit[_index] = _value;\n    }\n\n    function alterMultipleNumbers8bit(\n        uint256[] memory _indexes,\n        uint8[] memory _values\n    ) public onlyOwner {\n        for (uint256 i = 0; i < _indexes.length; i++) {\n            numbers8bit[_indexes[i]] = _values[i];\n        }\n    }\n\n    function getNumbers8bit() public view returns (uint8[] memory) {\n        return numbers8bit;\n    }\n\n    function setPersonStruct(\n        address _address,\n        Person memory _person\n    ) public onlyOwner {\n        people[_address] = _person;\n    }\n\n    function setPerson(\n        address _address,\n        string memory _name,\n        uint8 _age,\n        uint8 _heightInCm,\n        bool _senior,\n        string[] memory _hobbies\n    ) public onlyOwner {\n        Person memory person = Person({\n            name: _name,\n            age: _age,\n            heightInCm: _heightInCm,\n            senior: _senior,\n            hobbies: _hobbies\n        });\n\n        people[_address] = person;\n    }\n\n    function getPerson(\n        address _address\n    ) public view returns (string memory, uint8, uint8, bool, string[] memory) {\n        Person memory person = people[_address];\n        return (\n            person.name,\n            person.age,\n            person.heightInCm,\n            person.senior,\n            person.hobbies\n        );\n    }\n\n    // Emitted when the stored value changes\n    event ValueChanged(uint256 newValue);\n\n    // Stores a new value in the contract\n    function storeValue(uint256 newValue) public onlyOwner {\n        value = newValue;\n        emit ValueChanged(newValue);\n    }\n\n    // Reads the last stored value\n    function retrieveValue() public view returns (uint256) {\n        return value;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}